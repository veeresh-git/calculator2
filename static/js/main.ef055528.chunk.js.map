{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleClick","data","setState","total","state","err","handleEquals","evaluate","error","this","className","colSpan","type","value","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yRA6HeA,E,kDAxHb,aAAe,IAAD,8BACZ,gBAOFC,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEC,MAAO,EAAKC,MAAMD,MAAQF,IAC1C,EAAKC,SAAS,CAAEG,IAAK,MAVT,EAYdC,aAAe,WACb,IACE,EAAKJ,SAAS,CAAEC,MAAOI,YAAS,EAAKH,MAAMD,SAC3C,MAAOE,GACP,EAAKH,SAAS,CAAEG,IAAK,sBACrB,EAAKH,SAAS,CAAEC,MAAO,OAfzB,EAAKC,MAAQ,CACXD,MAAO,GACPE,IAAK,IAJK,E,qDAqBJ,IAAD,OACHG,EAAQ,GAIZ,OAHIC,KAAKL,MAAMC,MACbG,EAAQC,KAAKL,MAAMC,KAGnB,yBAAKK,UAAU,OACb,0CACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OAAOC,QAAQ,KAC5B,2BAAOC,KAAK,OAAOC,MAAOJ,KAAKL,MAAMD,SAEvC,+BACE,+BACE,4BACE,4BACE,4BAAQW,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,OAAxC,OAGJ,4BACE,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,OAAxC,OAGJ,4BACE,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BACEc,QAAS,WACP,EAAKd,YAAY,OAFrB,OASJ,4BACE,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,KAAxC,MAEF,4BACE,4BAAQc,QAAS,kBAAM,EAAKd,YAAY,OAAxC,MAEF,4BACE,4BAAQc,QAASL,KAAKH,cAAtB,MAEF,4BACE,4BAAQQ,QAAS,kBAAM,EAAKd,YAAY,OAAxC,OAGJ,4BACE,wBAAIW,QAAQ,KACV,4BACEG,QAAS,WACP,EAAKZ,SAAS,CAAEC,MAAO,KACvB,EAAKD,SAAS,CAAEG,IAAK,OAHzB,aAYR,4BAAKG,U,GAjHCO,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLyB,QAAQzB,MAAMA,EAAM0B,c","file":"static/js/main.ef055528.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { evaluate } from \"mathjs\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      total: \"\",\n      err: \"\",\n    };\n  }\n\n  handleClick = (data) => {\n    this.setState({ total: this.state.total + data });\n    this.setState({ err: \"\" });\n  };\n  handleEquals = () => {\n    try {\n      this.setState({ total: evaluate(this.state.total) });\n    } catch (err) {\n      this.setState({ err: \"Enter valid input\" });\n      this.setState({ total: \"\" });\n    }\n  };\n\n  render() {\n    var error = \"\";\n    if (this.state.err) {\n      error = this.state.err;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Calculator</h1>\n        <div className=\"wrapper\">\n          <div className=\"conatiner\">\n            <div className=\"zero\" colSpan=\"4\">\n              <input type=\"text\" value={this.state.total} />\n            </div>\n            <table>\n              <tbody>\n                <tr>\n                  <td>\n                    <button onClick={() => this.handleClick(1)}>1</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(2)}>2</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(3)}>3</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(\"+\")}>+</button>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <button onClick={() => this.handleClick(4)}>4</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(5)}>5</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(6)}>6</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(\"-\")}>-</button>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <button onClick={() => this.handleClick(7)}>7</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(8)}>8</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(9)}>9</button>\n                  </td>\n                  <td>\n                    <button\n                      onClick={() => {\n                        this.handleClick(\"*\");\n                      }}\n                    >\n                      x\n                    </button>\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <button onClick={() => this.handleClick(0)}>0</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(\".\")}>.</button>\n                  </td>\n                  <td>\n                    <button onClick={this.handleEquals}>=</button>\n                  </td>\n                  <td>\n                    <button onClick={() => this.handleClick(\"/\")}>/</button>\n                  </td>\n                </tr>\n                <tr>\n                  <td colSpan=\"4\">\n                    <button\n                      onClick={() => {\n                        this.setState({ total: \"\" });\n                        this.setState({ err: \"\" });\n                      }}\n                    >\n                      Clear\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <h3>{error}</h3>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}